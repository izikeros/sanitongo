name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13", "3.14"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Run linting with ruff
      run: |
        uv run ruff check src/ tests/
        uv run ruff format --check src/ tests/
    
    - name: Run type checking with ty
      run: |
        uv run ty check src/sanitongo
    
    - name: Run security checks with bandit
      run: |
        uv run bandit -r src/ -f json
    
    - name: Check dependencies with safety
      run: |
        uv run safety check --json
    
    - name: Run tests with pytest
      run: |
        uv run pytest --cov=src/sanitongo --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Run security tests
      run: |
        uv run pytest tests/test_security.py -m security -v
    
    - name: Run additional security scans
      run: |
        uv run bandit -r src/ -ll
        uv run safety check

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Install build dependencies
      run: |
        uv sync --dev
    
    - name: Build package
      run: |
        uv run python -m build
    
    - name: Check package
      run: |
        uv run twine check dist/*
    
    - name: Upload to PyPI
      if: github.event_name == 'release' && github.event.action == 'published'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        uv run twine upload dist/*

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Install dependencies
      run: |
        uv sync --dev
        uv add pymongo
    
    - name: Wait for MongoDB
      run: |
        uv run python -c "
        import time
        import pymongo
        
        for i in range(30):
            try:
                client = pymongo.MongoClient('mongodb://admin:password@localhost:27017/', serverSelectionTimeoutMS=2000)
                client.admin.command('ping')
                print('MongoDB is ready!')
                break
            except Exception as e:
                print(f'Waiting for MongoDB... (attempt {i+1}/30)')
                time.sleep(2)
        else:
            raise Exception('MongoDB failed to start after 60 seconds')
        "
    
    - name: Run integration tests
      env:
        MONGODB_URI: mongodb://admin:password@localhost:27017/testdb?authSource=admin
      run: |
        uv run pytest tests/ -m integration -v

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Run performance tests
      run: |
        uv run pytest tests/ -k "benchmark" --benchmark-only --benchmark-json=benchmark.json

    - name: Commit benchmark results
      run: |
        git add benchmark.json
        git commit -m "Save benchmark results" || echo "No changes to commit"

    - name: Switch to gh-pages
      run: git switch gh-pages

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        tool: pytest
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        name: "Performance Benchmarks"
        gh-pages-branch: gh-pages
        benchmark-data-dir-path: dev/bench
        comment-always: false
        summary-always: false
        save-data-file: true
        alert-threshold: 200%
        fail-on-alert: false